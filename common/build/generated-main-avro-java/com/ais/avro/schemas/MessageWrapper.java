/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ais.avro.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MessageWrapper extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 231519125503706165L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MessageWrapper\",\"namespace\":\"com.ais.avro.schemas\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch milliseconds\"},{\"name\":\"heartbeat\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Heartbeat\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch milliseconds\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"ConnectionStatus\",\"symbols\":[\"CONNECTED\",\"DISCONNECTED\",\"ERROR\"]},\"doc\":\"Current connection status\"}]}],\"default\":null},{\"name\":\"rawData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"RawData\",\"fields\":[{\"name\":\"data\",\"type\":\"bytes\",\"doc\":\"Raw bytes collected from TCP port\"}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MessageWrapper> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MessageWrapper> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MessageWrapper> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MessageWrapper> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MessageWrapper> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MessageWrapper to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MessageWrapper from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MessageWrapper instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MessageWrapper fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unix epoch milliseconds */
  private long timestamp;
  private com.ais.avro.schemas.Heartbeat heartbeat;
  private com.ais.avro.schemas.RawData rawData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MessageWrapper() {}

  /**
   * All-args constructor.
   * @param timestamp Unix epoch milliseconds
   * @param heartbeat The new value for heartbeat
   * @param rawData The new value for rawData
   */
  public MessageWrapper(java.lang.Long timestamp, com.ais.avro.schemas.Heartbeat heartbeat, com.ais.avro.schemas.RawData rawData) {
    this.timestamp = timestamp;
    this.heartbeat = heartbeat;
    this.rawData = rawData;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return heartbeat;
    case 2: return rawData;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: heartbeat = (com.ais.avro.schemas.Heartbeat)value$; break;
    case 2: rawData = (com.ais.avro.schemas.RawData)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Unix epoch milliseconds
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Unix epoch milliseconds
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'heartbeat' field.
   * @return The value of the 'heartbeat' field.
   */
  public com.ais.avro.schemas.Heartbeat getHeartbeat() {
    return heartbeat;
  }


  /**
   * Sets the value of the 'heartbeat' field.
   * @param value the value to set.
   */
  public void setHeartbeat(com.ais.avro.schemas.Heartbeat value) {
    this.heartbeat = value;
  }

  /**
   * Gets the value of the 'rawData' field.
   * @return The value of the 'rawData' field.
   */
  public com.ais.avro.schemas.RawData getRawData() {
    return rawData;
  }


  /**
   * Sets the value of the 'rawData' field.
   * @param value the value to set.
   */
  public void setRawData(com.ais.avro.schemas.RawData value) {
    this.rawData = value;
  }

  /**
   * Creates a new MessageWrapper RecordBuilder.
   * @return A new MessageWrapper RecordBuilder
   */
  public static com.ais.avro.schemas.MessageWrapper.Builder newBuilder() {
    return new com.ais.avro.schemas.MessageWrapper.Builder();
  }

  /**
   * Creates a new MessageWrapper RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MessageWrapper RecordBuilder
   */
  public static com.ais.avro.schemas.MessageWrapper.Builder newBuilder(com.ais.avro.schemas.MessageWrapper.Builder other) {
    if (other == null) {
      return new com.ais.avro.schemas.MessageWrapper.Builder();
    } else {
      return new com.ais.avro.schemas.MessageWrapper.Builder(other);
    }
  }

  /**
   * Creates a new MessageWrapper RecordBuilder by copying an existing MessageWrapper instance.
   * @param other The existing instance to copy.
   * @return A new MessageWrapper RecordBuilder
   */
  public static com.ais.avro.schemas.MessageWrapper.Builder newBuilder(com.ais.avro.schemas.MessageWrapper other) {
    if (other == null) {
      return new com.ais.avro.schemas.MessageWrapper.Builder();
    } else {
      return new com.ais.avro.schemas.MessageWrapper.Builder(other);
    }
  }

  /**
   * RecordBuilder for MessageWrapper instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MessageWrapper>
    implements org.apache.avro.data.RecordBuilder<MessageWrapper> {

    /** Unix epoch milliseconds */
    private long timestamp;
    private com.ais.avro.schemas.Heartbeat heartbeat;
    private com.ais.avro.schemas.Heartbeat.Builder heartbeatBuilder;
    private com.ais.avro.schemas.RawData rawData;
    private com.ais.avro.schemas.RawData.Builder rawDataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ais.avro.schemas.MessageWrapper.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.heartbeat)) {
        this.heartbeat = data().deepCopy(fields()[1].schema(), other.heartbeat);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasHeartbeatBuilder()) {
        this.heartbeatBuilder = com.ais.avro.schemas.Heartbeat.newBuilder(other.getHeartbeatBuilder());
      }
      if (isValidValue(fields()[2], other.rawData)) {
        this.rawData = data().deepCopy(fields()[2].schema(), other.rawData);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasRawDataBuilder()) {
        this.rawDataBuilder = com.ais.avro.schemas.RawData.newBuilder(other.getRawDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MessageWrapper instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ais.avro.schemas.MessageWrapper other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.heartbeat)) {
        this.heartbeat = data().deepCopy(fields()[1].schema(), other.heartbeat);
        fieldSetFlags()[1] = true;
      }
      this.heartbeatBuilder = null;
      if (isValidValue(fields()[2], other.rawData)) {
        this.rawData = data().deepCopy(fields()[2].schema(), other.rawData);
        fieldSetFlags()[2] = true;
      }
      this.rawDataBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Unix epoch milliseconds
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Unix epoch milliseconds
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.ais.avro.schemas.MessageWrapper.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Unix epoch milliseconds
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Unix epoch milliseconds
      * @return This builder.
      */
    public com.ais.avro.schemas.MessageWrapper.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'heartbeat' field.
      * @return The value.
      */
    public com.ais.avro.schemas.Heartbeat getHeartbeat() {
      return heartbeat;
    }


    /**
      * Sets the value of the 'heartbeat' field.
      * @param value The value of 'heartbeat'.
      * @return This builder.
      */
    public com.ais.avro.schemas.MessageWrapper.Builder setHeartbeat(com.ais.avro.schemas.Heartbeat value) {
      validate(fields()[1], value);
      this.heartbeatBuilder = null;
      this.heartbeat = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'heartbeat' field has been set.
      * @return True if the 'heartbeat' field has been set, false otherwise.
      */
    public boolean hasHeartbeat() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'heartbeat' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.ais.avro.schemas.Heartbeat.Builder getHeartbeatBuilder() {
      if (heartbeatBuilder == null) {
        if (hasHeartbeat()) {
          setHeartbeatBuilder(com.ais.avro.schemas.Heartbeat.newBuilder(heartbeat));
        } else {
          setHeartbeatBuilder(com.ais.avro.schemas.Heartbeat.newBuilder());
        }
      }
      return heartbeatBuilder;
    }

    /**
     * Sets the Builder instance for the 'heartbeat' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.ais.avro.schemas.MessageWrapper.Builder setHeartbeatBuilder(com.ais.avro.schemas.Heartbeat.Builder value) {
      clearHeartbeat();
      heartbeatBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'heartbeat' field has an active Builder instance
     * @return True if the 'heartbeat' field has an active Builder instance
     */
    public boolean hasHeartbeatBuilder() {
      return heartbeatBuilder != null;
    }

    /**
      * Clears the value of the 'heartbeat' field.
      * @return This builder.
      */
    public com.ais.avro.schemas.MessageWrapper.Builder clearHeartbeat() {
      heartbeat = null;
      heartbeatBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rawData' field.
      * @return The value.
      */
    public com.ais.avro.schemas.RawData getRawData() {
      return rawData;
    }


    /**
      * Sets the value of the 'rawData' field.
      * @param value The value of 'rawData'.
      * @return This builder.
      */
    public com.ais.avro.schemas.MessageWrapper.Builder setRawData(com.ais.avro.schemas.RawData value) {
      validate(fields()[2], value);
      this.rawDataBuilder = null;
      this.rawData = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rawData' field has been set.
      * @return True if the 'rawData' field has been set, false otherwise.
      */
    public boolean hasRawData() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'rawData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.ais.avro.schemas.RawData.Builder getRawDataBuilder() {
      if (rawDataBuilder == null) {
        if (hasRawData()) {
          setRawDataBuilder(com.ais.avro.schemas.RawData.newBuilder(rawData));
        } else {
          setRawDataBuilder(com.ais.avro.schemas.RawData.newBuilder());
        }
      }
      return rawDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'rawData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.ais.avro.schemas.MessageWrapper.Builder setRawDataBuilder(com.ais.avro.schemas.RawData.Builder value) {
      clearRawData();
      rawDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rawData' field has an active Builder instance
     * @return True if the 'rawData' field has an active Builder instance
     */
    public boolean hasRawDataBuilder() {
      return rawDataBuilder != null;
    }

    /**
      * Clears the value of the 'rawData' field.
      * @return This builder.
      */
    public com.ais.avro.schemas.MessageWrapper.Builder clearRawData() {
      rawData = null;
      rawDataBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MessageWrapper build() {
      try {
        MessageWrapper record = new MessageWrapper();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        if (heartbeatBuilder != null) {
          try {
            record.heartbeat = this.heartbeatBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("heartbeat"));
            throw e;
          }
        } else {
          record.heartbeat = fieldSetFlags()[1] ? this.heartbeat : (com.ais.avro.schemas.Heartbeat) defaultValue(fields()[1]);
        }
        if (rawDataBuilder != null) {
          try {
            record.rawData = this.rawDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("rawData"));
            throw e;
          }
        } else {
          record.rawData = fieldSetFlags()[2] ? this.rawData : (com.ais.avro.schemas.RawData) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MessageWrapper>
    WRITER$ = (org.apache.avro.io.DatumWriter<MessageWrapper>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MessageWrapper>
    READER$ = (org.apache.avro.io.DatumReader<MessageWrapper>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    if (this.heartbeat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.heartbeat.customEncode(out);
    }

    if (this.rawData == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.rawData.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.heartbeat = null;
      } else {
        if (this.heartbeat == null) {
          this.heartbeat = new com.ais.avro.schemas.Heartbeat();
        }
        this.heartbeat.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rawData = null;
      } else {
        if (this.rawData == null) {
          this.rawData = new com.ais.avro.schemas.RawData();
        }
        this.rawData.customDecode(in);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.heartbeat = null;
          } else {
            if (this.heartbeat == null) {
              this.heartbeat = new com.ais.avro.schemas.Heartbeat();
            }
            this.heartbeat.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rawData = null;
          } else {
            if (this.rawData == null) {
              this.rawData = new com.ais.avro.schemas.RawData();
            }
            this.rawData.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










